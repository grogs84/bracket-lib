{
  "version": 3,
  "sources": ["../../@mgi/bracket-core/dist/index.js"],
  "sourcesContent": ["// src/index.ts\nfunction buildLayout(input, opts = {}) {\n  const hGap = opts.hGap ?? 160;\n  const vGap = opts.vGap ?? 80;\n  const matchesById = /* @__PURE__ */ new Map();\n  for (const m of input.matches) {\n    if (matchesById.has(m.id)) {\n      throw new Error(`Duplicate match id: ${m.id}`);\n    }\n    matchesById.set(m.id, m);\n  }\n  if (matchesById.size === 0) {\n    return { nodes: [], edges: [], rounds: [] };\n  }\n  const roots = input.matches.filter((m) => m.winnerNextMatchId === null);\n  if (roots.length !== 1) {\n    throw new Error(\n      `Expected exactly 1 finals (winnerNextMatchId === null), got ${roots.length}`\n    );\n  }\n  const root = roots[0];\n  const children = /* @__PURE__ */ new Map();\n  for (const m of input.matches) {\n    const p = m.winnerNextMatchId;\n    if (p !== null) {\n      const arr = children.get(p) ?? [];\n      arr.push(m);\n      children.set(p, arr);\n    }\n  }\n  for (const [k, arr] of children) {\n    arr.sort((a, b) => a.id < b.id ? -1 : a.id > b.id ? 1 : 0);\n    children.set(k, arr);\n  }\n  const depthById = /* @__PURE__ */ new Map();\n  const yRowById = /* @__PURE__ */ new Map();\n  const edges = [];\n  let nextLeafRow = 0;\n  function dfsAssign(node, depth) {\n    depthById.set(node.id, depth);\n    const kids = children.get(node.id) ?? [];\n    if (kids.length === 0) {\n      const row = nextLeafRow++;\n      yRowById.set(node.id, row);\n      return row;\n    }\n    const childRows = [];\n    for (const child of kids) {\n      edges.push({ from: child.id, to: node.id, kind: \"winner\" });\n      const r = dfsAssign(child, depth + 1);\n      childRows.push(r);\n    }\n    const minR = Math.min(...childRows);\n    const maxR = Math.max(...childRows);\n    const myRow = (minR + maxR) / 2;\n    yRowById.set(node.id, myRow);\n    return myRow;\n  }\n  dfsAssign(root, 0);\n  let maxDepth = 0;\n  for (const d of depthById.values()) maxDepth = Math.max(maxDepth, d);\n  const nodes = [];\n  for (const [id, depth] of depthById) {\n    const round = maxDepth - depth;\n    const row = yRowById.get(id);\n    nodes.push({\n      id,\n      x: round * hGap,\n      y: row * vGap,\n      round\n    });\n  }\n  nodes.sort(\n    (a, b) => a.round !== b.round ? a.round - b.round : a.y !== b.y ? a.y - b.y : a.id.localeCompare(b.id)\n  );\n  const rounds = Array.from({ length: maxDepth + 1 }, () => []);\n  for (const n of nodes) {\n    rounds[n.round].push(n.id);\n  }\n  return { nodes, edges, rounds };\n}\nexport {\n  buildLayout\n};\n"],
  "mappings": "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",
  "names": []
}
